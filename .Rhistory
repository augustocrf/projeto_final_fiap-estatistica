setwd("C:/MBA/Sources/MBA_Projects/Final_Projects/projeto_final_fiap-estatistica")
# Carregue aqui todos os pacotes utilizados
# na sua análise realizada neste arquivo fonte.
# Note que o parâmetro "echo" foi definido como FALSE neste código.
# Isso previne que o código apresente resultados formatados em HTML.
# Você deve definir  para todos os blocos de código no seu arquivo.
#require(readr)
install_missing_packages <- function(needToBeFixed = FALSE,... ) {
# Instala pacotes caso necessario
if ( "knitr" %in% rownames(installed.packages()) == FALSE ) { install.packages("knitr", dependencies = TRUE) }
if ( "ggplot2" %in% rownames(installed.packages()) == FALSE ) { install.packages("ggplot2", dependencies = TRUE) }
if ( "grid" %in% rownames(installed.packages()) == FALSE ) { install.packages("grid", dependencies = TRUE) }
if ( "gridExtra" %in% rownames(installed.packages()) == FALSE ) { install.packages("gridExtra", dependencies = TRUE) }
if ( "dplyr" %in% rownames(installed.packages()) == FALSE ) { install.packages("dplyr", dependencies = TRUE) }
if ( "scales" %in% rownames(installed.packages()) == FALSE ) { install.packages('scales', dependencies = TRUE) }
if ( "GGally" %in% rownames(installed.packages()) == FALSE ) { install.packages("GGally", dependencies = TRUE) }
if ( "gtable" %in% rownames(installed.packages()) == FALSE ) { install.packages("gtable", dependencies = TRUE) }
if ( "corrgram" %in% rownames(installed.packages()) == FALSE ) { install.packages("corrgram", dependencies = TRUE) }
if ( "psych" %in% rownames(installed.packages()) == FALSE ) { install.packages("psych", dependencies = TRUE) }
if ( "memisc" %in% rownames(installed.packages()) == FALSE ) { install.packages("memisc", dependencies = TRUE) }
if ( "rpart" %in% rownames(installed.packages()) == FALSE ) { install.packages("rpart", dependencies = TRUE) }
if ( "gmodels" %in% rownames(installed.packages()) == FALSE ) { install.packages("gmodels", dependencies = TRUE) }
if ( "rpart.plot" %in% rownames(installed.packages()) == FALSE ) { install.packages("rpart.plot", dependencies = TRUE) }
if ( "rattle" %in% rownames(installed.packages()) == FALSE ) { install.packages("rattle", dependencies = TRUE) }
}
# Instala pacotes adicionais e pacotes necessários
install_missing_packages()
library(knitr)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(scales)
library(GGally)
library(gtable)
library(corrgram)
library(psych)
library(memisc)
library(rpart) #for trees
library(rpart.plot)
library(gmodels)
library(rattle)
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
error = FALSE,
warning = FALSE,
fig.width = 12,
fig.height = 8)
# Carregamento dos dados
red_wine_quality <- read.csv2('data/winequality-red.csv')
white_wine_quality <- read.csv2('data/winequality-white.csv')
# tamanho da base
dim(red_wine_quality)
# quantidade e formatos de variáveis
str(red_wine_quality)
# Descritivos
summary(red_wine_quality)
# tamanho da base
dim(white_wine_quality)
# quantidade e formatos de variáveis
str(white_wine_quality)
# Descritivos
summary(white_wine_quality)
# Vinho Tinto
red_wine_quality <-
red_wine_quality %>%
mutate(
fixed.acidity = as.numeric(fixed.acidity),
volatile.acidity = as.numeric(volatile.acidity),
citric.acid = as.numeric(citric.acid),
residual.sugar = as.numeric(residual.sugar),
chlorides = as.numeric(chlorides),
free.sulfur.dioxide = as.numeric(free.sulfur.dioxide),
total.sulfur.dioxide = as.numeric(total.sulfur.dioxide),
density = as.numeric(density),
pH = as.numeric(pH),
sulphates = as.numeric(sulphates),
alcohol = as.numeric(alcohol)
)
# Vinho Branco
white_wine_quality <-
white_wine_quality %>%
mutate(
fixed.acidity = as.numeric(fixed.acidity),
volatile.acidity = as.numeric(volatile.acidity),
citric.acid = as.numeric(citric.acid),
residual.sugar = as.numeric(residual.sugar),
chlorides = as.numeric(chlorides),
free.sulfur.dioxide = as.numeric(free.sulfur.dioxide),
total.sulfur.dioxide = as.numeric(total.sulfur.dioxide),
density = as.numeric(density),
pH = as.numeric(pH),
sulphates = as.numeric(sulphates),
alcohol = as.numeric(alcohol)
)
red_wine_quality['tipo.vinho'] <- 'vermelho'
white_wine_quality['tipo.vinho']<- 'branco'
wine_quality <- merge(red_wine_quality, white_wine_quality, all = TRUE)
# Labels para auxiliar na leitura dos gráficos e entendimento do item analisado
labels_graphs_variables <- c(
"Acidez Fixa (ácido tartárico - g/dm^3)",
"Acidez Volátil (ácido acético - g/dm^3)",
"Ácido Cítrico (g/dm^3)",
"Açucar Residual (g/dm^3)",
"Cloretos (cloreto de sódio - g/dm^3)",
"Dióxido de Enxofre livre (mg/dm^3)",
"Dióxido de Enxofre total (mg/dm^3)",
"Densidade (g/cm^3)",
"pH (escala de 0 (muito ácida) a 14 (muito básica))",
"Sulfatos (Sulfato de potássio - g/dm3)",
"Álcool (% por volume)",
"Qualidade (Entre 0 (muito ruim) e 10 (muito bom))",
"Total de Acidez (g/dm^3)"
)
# label default para graficos para definir quantidade de registros para nao para
# otimizar memoria com string
lbl_qtd_registros <- "Quantidade de registros"
lbl_qualidade_cls <- "Qualidade (Bom/Ruim)"
# associar as labels aos nomes das colunas
names(labels_graphs_variables) <- colnames(wine_quality)
check_limits_outlier <- function(coluna){
AIQ <- quantile(coluna, .75, type=4)-quantile(coluna, .25, type=2)
limite_inferior <- quantile(coluna, .25, type=2) - 1.5 * AIQ
limite_superior <- quantile(coluna, .75, type=4) + 1.5 * AIQ
return (c(limite_inferior, limite_superior))
}
validate_outlier <- function(coluna, limits){
#verifica se o valor esta abaixo do valor limite inferior ou superior de outlier
return (coluna < limits[1] | coluna > limits[2])
}
attach(red_wine_quality)
outl_limit_fixed.acidity <- check_limits_outlier(fixed.acidity)
outl_limit_volatile.acidity <- check_limits_outlier(volatile.acidity)
outl_limit_citric.acid <- check_limits_outlier(citric.acid)
outl_limit_residual.sugar <- check_limits_outlier(residual.sugar)
outl_limit_chlorides <- check_limits_outlier(chlorides)
outl_limit_free.sulfur.dioxide <- check_limits_outlier(free.sulfur.dioxide)
outl_limit_total.sulfur.dioxide <- check_limits_outlier(total.sulfur.dioxide)
outl_limit_density <- check_limits_outlier(density)
outl_limit_pH <- check_limits_outlier(pH)
outl_limit_sulphates <- check_limits_outlier(sulphates)
outl_limit_alcohol <- check_limits_outlier(alcohol)
red_wine_quality <-
red_wine_quality %>%
mutate (
outl_fixed.acidity = if_else(validate_outlier(fixed.acidity,outl_limit_fixed.acidity), 1, 0),
outl_volatile.acidity = if_else(validate_outlier(volatile.acidity, outl_limit_volatile.acidity ), 1, 0),
outl_citric.acid = if_else(validate_outlier(citric.acid, outl_limit_citric.acid ), 1, 0),
outl_residual.sugar = if_else(validate_outlier(residual.sugar, outl_limit_residual.sugar ), 1, 0),
outl_chlorides = if_else(validate_outlier(chlorides, outl_limit_chlorides ), 1, 0),
outl_free.sulfur.dioxide = if_else(validate_outlier(free.sulfur.dioxide, outl_limit_free.sulfur.dioxide ), 1, 0),
outl_total.sulfur.dioxide = if_else(validate_outlier(total.sulfur.dioxide, outl_limit_total.sulfur.dioxide ), 1, 0),
outl_density = if_else(validate_outlier(density, outl_limit_density ), 1, 0),
outl_pH = if_else(validate_outlier(pH, outl_limit_pH ), 1, 0),
outl_sulphates = if_else(validate_outlier(sulphates, outl_limit_sulphates ), 1, 0),
outl_alcohol = if_else(validate_outlier(alcohol, outl_limit_alcohol ), 1, 0)
)
attach(white_wine_quality)
outl_limit_fixed.acidity <- check_limits_outlier(fixed.acidity)
outl_limit_volatile.acidity <- check_limits_outlier(volatile.acidity)
outl_limit_citric.acid <- check_limits_outlier(citric.acid)
outl_limit_residual.sugar <- check_limits_outlier(residual.sugar)
outl_limit_chlorides <- check_limits_outlier(chlorides)
outl_limit_free.sulfur.dioxide <- check_limits_outlier(free.sulfur.dioxide)
outl_limit_total.sulfur.dioxide <- check_limits_outlier(total.sulfur.dioxide)
outl_limit_density <- check_limits_outlier(density)
outl_limit_pH <- check_limits_outlier(pH)
outl_limit_sulphates <- check_limits_outlier(sulphates)
outl_limit_alcohol <- check_limits_outlier(alcohol)
white_wine_quality <-
white_wine_quality %>%
mutate (
outl_fixed.acidity = if_else(validate_outlier(fixed.acidity,outl_limit_fixed.acidity), 1, 0),
outl_volatile.acidity = if_else(validate_outlier(volatile.acidity, outl_limit_volatile.acidity ), 1, 0),
outl_citric.acid = if_else(validate_outlier(citric.acid, outl_limit_citric.acid ), 1, 0),
outl_residual.sugar = if_else(validate_outlier(residual.sugar, outl_limit_residual.sugar ), 1, 0),
outl_chlorides = if_else(validate_outlier(chlorides, outl_limit_chlorides ), 1, 0),
outl_free.sulfur.dioxide = if_else(validate_outlier(free.sulfur.dioxide, outl_limit_free.sulfur.dioxide ), 1, 0),
outl_total.sulfur.dioxide = if_else(validate_outlier(total.sulfur.dioxide, outl_limit_total.sulfur.dioxide ), 1, 0),
outl_density = if_else(validate_outlier(density, outl_limit_density ), 1, 0),
outl_pH = if_else(validate_outlier(pH, outl_limit_pH ), 1, 0),
outl_sulphates = if_else(validate_outlier(sulphates, outl_limit_sulphates ), 1, 0),
outl_alcohol = if_else(validate_outlier(alcohol, outl_limit_alcohol ), 1, 0)
)
# Gráficos e análise sobre os dois tipos de vinhos
# Dataset de vinho
attach(wine_quality)
boxplot(quality ~ tipo.vinho, main='quality')
par (mfrow=c(3,4))
boxplot(fixed.acidity ~ tipo.vinho, main='fixedacidity',col=c('red','blue'))
boxplot(volatile.acidity ~ tipo.vinho , main='volatileacidity',col=c('red','blue'))
boxplot(citric.acid ~ tipo.vinho, main='citricacid',col=c('red','blue'))
boxplot(residual.sugar ~ tipo.vinho, main='residualsugar',col=c('red','blue'))
boxplot(chlorides ~ tipo.vinho, main='chlorides',col=c('red','blue'))
boxplot(free.sulfur.dioxide ~ tipo.vinho, main='freesulfurdioxide' ,col=c('red','blue'))
boxplot(total.sulfur.dioxide ~ tipo.vinho, main='totalsulfurdioxide',col=c('red','blue'))
boxplot(density ~ tipo.vinho, main='density',col=c('red','blue'))
boxplot(pH ~ tipo.vinho, main='pH',col=c('red','blue'))
boxplot(sulphates ~ tipo.vinho, main='sulphates',col=c('red','blue'))
boxplot(alcohol ~ tipo.vinho, main='alcohol',col=c('red','blue'))
par (mfrow=c(1,1))
# Detecção de outliers
attach(red_wine_quality)
# Correlações entre elas (numéricas e gráficos)
plot(free.sulfur.dioxide~total.sulfur.dioxide)
plot(free.sulfur.dioxide~total.sulfur.dioxide, pch=1, lwd=3)
plot(free.sulfur.dioxide~total.sulfur.dioxide)
abline(v=mean(free.sulfur.dioxide), col="red")
abline(h=mean(total.sulfur.dioxide), col="green")
# Dataset de vinho
attach(white_wine_quality)
plot(free.sulfur.dioxide~total.sulfur.dioxide)
plot(free.sulfur.dioxide~total.sulfur.dioxide, pch=1, lwd=3)
plot(free.sulfur.dioxide~total.sulfur.dioxide)
abline(v=mean(free.sulfur.dioxide), col="red")
abline(h=mean(total.sulfur.dioxide), col="green")
# Detecção de outliers
attach(red_wine_quality)
# Detecção de outliers
attach(white_wine_quality)
attach(white_wine_quality)
# Avaliacao da Analise
par (mfrow=c(3,4))
hist(fixed.acidity)
hist(volatile.acidity)
hist(citric.acid)
hist(residual.sugar)
hist(chlorides)
hist(free.sulfur.dioxide)
hist(total.sulfur.dioxide)
hist(density)
hist(pH)
hist(sulphates)
hist(alcohol)
hist(quality)
par (mfrow=c(1,1))
# Correlações entre elas (numéricas e gráficos)
white_wine_quality_corr <- subset(white_wine_quality, select=c(quality,fixed.acidity,volatile.acidity,citric.acid,residual.sugar,
chlorides,free.sulfur.dioxide,total.sulfur.dioxide,density,pH,
sulphates,alcohol))
winematCor <- round(cor(white_wine_quality_corr),3)
print(winematCor)
corrgram(winematCor, type = "cor", lower.panel = panel.shade, upper.panel = panel.pie)
attach(white_wine_quality)
table(as.factor(wine_quality$quality),wine_quality$tipo.vinho, useNA = "ifany")
table(as.factor(wine_quality$quality),wine_quality$tipo.vinho)
# Modelo 1: Regressão Linear
modelo_rl <- lm(quality ~ alcohol+pH)
summary(modelo_rl)
valor_predito_rl <- predict(modelo_rl,interval = "prediction", level = 0.95)
# intervalo de confianca - grafico para media
fit_lr <- valor_predito_rl[,1] # valores preditos
lower_lr <- valor_predito_rl[,2] # limite inferior
upper_lr <- valor_predito_rl[,3] # limite superior
mse_lr <- mean((quality - fit_lr)^2)
sqrt(mse_lr)
erro_usando_media_lr <- mean((quality - mean(quality))^2)
sqrt(erro_usando_media_lr)
# grafico residuo
rs_lr <- resid(modelo_rl)
plot(predict(modelo_rl), rs_lr, xlab = "Preditor linear",ylab = "Residuos")
abline(h = 0, lty = 2)
# Modelo 2: Árvore de Regressão
attach(white_wine_quality)
modelo_AR  <- rpart(quality ~ alcohol+pH, data=white_wine_quality,
cp = 0.001,minsplit = 5,maxdepth=10)
rpart.plot(modelo_AR, type=4, extra=1, under=FALSE, clip.right.labs=TRUE,
fallen.leaves=FALSE,   digits=2, varlen=-10, faclen=20,
cex=0.4, tweak=1.7, compress=TRUE, snip=FALSE)
Valor_predito_AR <- predict(modelo_AR,interval = "prediction", level = 0.95)
str(Valor_predito_AR)
mse_AR <- mean((quality - Valor_predito_AR)^2)
sqrt(mse_AR)
erro_usando_media_AR <- mean((quality - mean(quality))^2)
sqrt(erro_usando_media_AR)
# grafico residuo
rs <- Valor_predito_AR - quality
plot(predict(modelo_AR), rs, xlab = "Com Árvore de Regressão",ylab = "Residuos")
abline(h = 0, lty = 2)
# Modelo 3: Árvore de Decisão
modelo_AD <- rpart (quality ~ alcohol+pH, data=white_wine_quality, cp = 0.008,minsplit = 250,maxdepth=10)
# Faz o Grafico
# Deixou apenas as variaveis que s?o significativas no modelo
rpart.plot(modelo_AD, type=2, extra="auto", under=FALSE, clip.right.labs=TRUE,
fallen.leaves=TRUE,   digits=2, varlen=-3, faclen=15,
cex=0.4, tweak=1.7,
compress=TRUE,box.palette="auto",
snip=FALSE)
# Matriz de Confusao
preds_prob <- predict(modelo_AD, white_wine_quality)
preds_cat  <- predict(modelo_AD, type = "vector", white_wine_quality)
table(preds_cat)
# Predict como funcao para trazer a probabilidade do cliente ser Campanhaimplente(0/1)
Vinho.previsto.com.modelo <- predict(modelo_AD, white_wine_quality)
## Predict com tipo 'classe' retorna se eh Campanhaimplente ou nao
Vinho.previsto.com.modelo <- predict(modelo_AD, white_wine_quality, type='vector')
head(Vinho.previsto.com.modelo)
# Tabela entre o Previsto e o Real
Vinho.matriz.de.confusao <- table(quality, Vinho.previsto.com.modelo)
Vinho.matriz.de.confusao
diagonal <- diag(Vinho.matriz.de.confusao)
# Acuracia
perc.acerto <- sum(diagonal) / sum(Vinho.matriz.de.confusao)
perc.acerto
# O 1- eh para conseguir o percentaul de erro
perc.erro <- 1 - sum(diagonal) / sum(Vinho.matriz.de.confusao)
perc.erro
#plotar regra do modelo preditivo
fancyRpartPlot(modelo_AD, cex=0.70)
fancyRpartPlot(modelo_AD, cex=0.70,  palettes=c("Greys", "Oranges"))
# Modelo 4: Regressão Logística
modelo_log<- glm(quality ~ alcohol+pH, white_wine_quality, family = gaussian) #binomial(link=logit))
summary(modelo_log)
# fitted = Usado para o caso da Logistica
predito_log <- fitted(modelo_log)
# Probabilidade
summary(predito_log)
# Histograma - valor escalar
hist(predito_log)
### Matriz de confusao
# Corte no 50% (Acima de 50 ou abaixo de 50)
white_wine_quality$fx_predito <- cut(predito_log, breaks=c(3, 9), right=F)
plot(white_wine_quality$fx_predito, quality)
MC <- table(quality, white_wine_quality$fx_predito, deparse.level = 2) # montar a matriz de confus?o
show(MC) # mostra os resultados
ACC = sum(diag(MC)) / sum(MC) # calcula a acuracia
show(ACC) # mostra a acuracia
# Criar variavel faixa probabilidade
fx_predito1 <- cut(predito_log, breaks=c(5,6,7), right=F)
# Frequencia absoluta
table(fx_predito1,quality)
# Frequ?ncia relativa
prop.table(table(fx_predito1, quality),2)
plot(fx_predito1, quality)
# Resumo sobre a qualidade dos modelos
# Recomendação: Modelo/Técnica
# quais outras técnicas supervisionadas vocês indicariam como adequadas para esta análise?
# técnicas Não Supervisionadas, quais?
